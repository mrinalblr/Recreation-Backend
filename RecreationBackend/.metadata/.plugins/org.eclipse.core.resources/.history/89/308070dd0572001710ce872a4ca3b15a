package com.mrinal.controller;

import java.util.ArrayList;
import java.util.Hashtable;
import java.util.List;

import javax.websocket.server.PathParam;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import com.mrinal.model.ForgotPassword;
import com.mrinal.model.User;
import com.mrinal.model.UserDetails;
import com.mrinal.repo.UserDetailsRepo;
import com.mrinal.repo.UserRepo;
import com.mrinal.response.ForgotPasswordResponse;
import com.mrinal.response.GenericResponse;
import com.mrinal.response.UserResponse;
import com.mrinal.service.UserService;

import ch.qos.logback.classic.Logger;


@RestController
@RequestMapping("/users")
public class UserController {
    
	@Autowired
	UserService us;
	
	@Autowired
	UserRepo rp;
	
	@Autowired
	UserDetailsRepo udr;
	

	/*Get All Users List from Database*/
	//@CrossOrigin(origins = "http://localhost:8100", maxAge = 7200)
	@RequestMapping(method=RequestMethod.GET,value="/getAllUsers")
	@ResponseBody
	public ArrayList<User> getAllUser(){
		ArrayList<User> users = new ArrayList<User>();
		users = rp.findAll();
		return users;
		
	}
	/*Get User by Id*/
	//@CrossOrigin(origins = "http://localhost:8100", maxAge = 7200)
	@RequestMapping("getUserById/{id}")
	@ResponseBody
	public User getUser(@PathVariable("id") int id){
		System.out.println("inside getUser");
		User u = (User)rp.findUserById(id);
		return u;
	}
	
    /*Create Users in the database
     * 
     * */
	//@CrossOrigin(origins = "http://localhost:8100", maxAge = 7200)
	@RequestMapping("/create")
	@ResponseBody
	public ResponseEntity<GenericResponse> createUser(@RequestBody User user){
		GenericResponse response=null;
		System.out.println("Test: "+user.getEmailId() );
		User checkUser = null;
		checkUser = (User) rp.findByemailId(user.getEmailId());
		try{
			rp.save(user);
	        response = new GenericResponse("SUCCESS","User Created Successfully","");
	        return new ResponseEntity<GenericResponse>(response,HttpStatus.CREATED);
		}
		catch(Exception e){
			 response = new GenericResponse("FAILURE","",e.toString());
		        return new ResponseEntity<GenericResponse>(response,HttpStatus.OK);
		}
		
	}
	// @CrossOrigin(origins = "http://localhost:8100", maxAge = 7200)
	  @RequestMapping("/get-by-emailId")
	  @ResponseBody
	  public User getByFirstName(String emailId) {
	    String userId = "";
	    User user=null;
	    try {
	       user = rp.findByemailId(emailId);
	       userId = String.valueOf(user.getId());
	      // user = (User) rp.findAll();
	    }
	    catch (Exception ex) {
	      
	    }
	    return user;
	  } 
	//@CrossOrigin(origins = "http://localhost:8100", maxAge = 7200)
	@RequestMapping(value = "/login", method = RequestMethod.POST)
	public ResponseEntity<UserResponse> login(@RequestBody User user) {
          User newUser = new User();
          UserResponse response =null;
          String userId="";
          try{
	          if (user.getEmailId() != null) {
	    	    newUser=(User)rp.findByemailId(user.getEmailId());
	    	    userId = String.valueOf(newUser.getId());
	             response= new UserResponse("SUCCESS","Successfully loggedIn",newUser.getFirstName(),newUser.getLastName(),
	        		 newUser.getEmailId(),newUser.getPassword(),userId);
	    }
	    
          }
          catch(Exception e){
        	  response = new UserResponse("FAILURE","Unable to login");
        	  return new ResponseEntity<UserResponse>(response, HttpStatus.OK);
          }

	   
	    return new ResponseEntity<UserResponse>(response, HttpStatus.OK);
	}
	//@CrossOrigin(origins = "http://localhost:8100", maxAge = 7200)
	@RequestMapping(value = "/register", method = RequestMethod.POST)
	public ResponseEntity<UserResponse> register(@RequestBody User user) {
          User newUser = new User();
          User checkUser = new User();
          UserResponse response =null;
          String userId="";
          try{
	          if (user != null) {
	        	 checkUser = (User) rp.findByemailId(newUser.getEmailId());
	        	 if(checkUser !=null){
	        		 if(checkUser.getEmailId().equals(newUser.getEmailId())){
	        			System.out.println("Duplicate Email Id");
	        		 }else{
	        			 System.out.println("Email Id is not present");
	        			 newUser.setFirstName(user.getFirstName());
	    	    	     newUser.setLastName(user.getLastName());
	    	    	     newUser.setEmailId(user.getEmailId());
	    	             newUser.setPassword(user.getPassword());
	    	             rp.save(newUser);
	    	             userId = String.valueOf(newUser.getId());
	    	             response= new UserResponse("SUCCESS","Successfully registered",newUser.getFirstName(),newUser.getLastName(),
	    	        		 newUser.getEmailId(),userId);
	        		 }
	        	 }
/*	    	     newUser.setFirstName(user.getFirstName());
	    	     newUser.setLastName(user.getLastName());
	    	     newUser.setEmailId(user.getEmailId());
	             newUser.setPassword(user.getPassword());
	             rp.save(newUser);
	             userId = String.valueOf(newUser.getId());
	             response= new UserResponse("SUCCESS","Successfully registered",newUser.getFirstName(),newUser.getLastName(),
	        		 newUser.getEmailId(),userId);
*/	    }
	    
          }
          catch(Exception e){
        	  response = new UserResponse("FAILURE","Unable to register User");
        	  return new ResponseEntity<UserResponse>(response, HttpStatus.OK);
          }

	   
	    return new ResponseEntity<UserResponse>(response, HttpStatus.OK);
	}
	//@CrossOrigin(origins = "http://localhost:8100", maxAge = 7200)
	@RequestMapping(value="/forgotPassword",method=RequestMethod.POST)
	@ResponseBody
	public ResponseEntity<ForgotPasswordResponse> forgotPassword(@RequestBody ForgotPassword forgotPassword ){
		ForgotPasswordResponse response = null;
		User u1 =new User();
		User user = new User();
		u1 = (User) rp.findByemailId(forgotPassword.getEmailId());
		if(forgotPassword.getOldPassword().equals(u1.getPassword())){
		if(forgotPassword.getNewPassword().equals(forgotPassword.getConfirmNewPassword())){
			user.setEmailId(u1.getEmailId());
			user.setFirstName(u1.getFirstName());
			user.setLastName(u1.getLastName());
			user.setPassword(forgotPassword.getNewPassword());
			user.setId(u1.getId());
			rp.save(user);
			response = new ForgotPasswordResponse("SUCCESS","Password changed Successfully","");
			return new ResponseEntity<ForgotPasswordResponse>(response, HttpStatus.CREATED);
		}else{
			response = new ForgotPasswordResponse("FAILURE","","New Password and Confirm Password didn't match");
			return new ResponseEntity<ForgotPasswordResponse>(response, HttpStatus.OK);
		}
		}else{
			response = new ForgotPasswordResponse("FAILURE", "", "You have entered wrong current password.");
			return new ResponseEntity<ForgotPasswordResponse>(response,HttpStatus.OK);
		}
		
		
	}
//	user update request
	@RequestMapping(value="/addUserDetails",method=RequestMethod.POST)
	@ResponseBody
	public String addUserDetails(@RequestBody UserDetails userDetails){
		System.out.println(userDetails.getUser().getId());
		udr.save(userDetails);
	
		return "success";
	}
}
